package com.apparence.camerawesome.cameraX;// Autogenerated from Pigeon (v1.0.16), do not edit directly.
// See also: https://pub.dev/packages/pigeon


import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Pigeon {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PreviewSize {
    private @NonNull Double width;
    public @NonNull Double getWidth() { return width; }
    public void setWidth(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"width\" is null.");
      }
      this.width = setterArg;
    }

    private @NonNull Double height;
    public @NonNull Double getHeight() { return height; }
    public void setHeight(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"height\" is null.");
      }
      this.height = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private PreviewSize() {}
    public static class Builder {
      private @Nullable Double width;
      public @NonNull Builder setWidth(@NonNull Double setterArg) {
        this.width = setterArg;
        return this;
      }
      private @Nullable Double height;
      public @NonNull Builder setHeight(@NonNull Double setterArg) {
        this.height = setterArg;
        return this;
      }
      public @NonNull PreviewSize build() {
        PreviewSize pigeonReturn = new PreviewSize();
        pigeonReturn.setWidth(width);
        pigeonReturn.setHeight(height);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("width", width);
      toMapResult.put("height", height);
      return toMapResult;
    }
    static @NonNull PreviewSize fromMap(@NonNull Map<String, Object> map) {
      PreviewSize pigeonResult = new PreviewSize();
      Object width = map.get("width");
      pigeonResult.setWidth((Double)width);
      Object height = map.get("height");
      pigeonResult.setHeight((Double)height);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PreviewData {
    private @Nullable Double textureId;
    public @Nullable Double getTextureId() { return textureId; }
    public void setTextureId(@Nullable Double setterArg) {
      this.textureId = setterArg;
    }

    private @Nullable PreviewSize size;
    public @Nullable PreviewSize getSize() { return size; }
    public void setSize(@Nullable PreviewSize setterArg) {
      this.size = setterArg;
    }

    public static class Builder {
      private @Nullable Double textureId;
      public @NonNull Builder setTextureId(@Nullable Double setterArg) {
        this.textureId = setterArg;
        return this;
      }
      private @Nullable PreviewSize size;
      public @NonNull Builder setSize(@Nullable PreviewSize setterArg) {
        this.size = setterArg;
        return this;
      }
      public @NonNull PreviewData build() {
        PreviewData pigeonReturn = new PreviewData();
        pigeonReturn.setTextureId(textureId);
        pigeonReturn.setSize(size);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("textureId", textureId);
      toMapResult.put("size", (size == null) ? null : size.toMap());
      return toMapResult;
    }
    static @NonNull PreviewData fromMap(@NonNull Map<String, Object> map) {
      PreviewData pigeonResult = new PreviewData();
      Object textureId = map.get("textureId");
      pigeonResult.setTextureId((Double)textureId);
      Object size = map.get("size");
      pigeonResult.setSize(PreviewSize.fromMap((Map)size));
      return pigeonResult;
    }
  }

  public interface Result<T> {
    void success(T result);
    void error(Throwable error);
  }
  private static class CameraInterfaceCodec extends StandardMessageCodec {
    public static final CameraInterfaceCodec INSTANCE = new CameraInterfaceCodec();
    private CameraInterfaceCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return PreviewData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return PreviewSize.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof PreviewData) {
        stream.write(128);
        writeValue(stream, ((PreviewData) value).toMap());
      } else 
      if (value instanceof PreviewSize) {
        stream.write(129);
        writeValue(stream, ((PreviewSize) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface CameraInterface {
    void setupCamera(Result<Void> result);
    List<String> checkPermissions();
    List<String> requestPermissions();
    PreviewData getPreviewTextureId(Long cameraId);
    String takePicture();
    String takeVideo();

    /** The codec used by CameraInterface. */
    static MessageCodec<Object> getCodec() {
      return CameraInterfaceCodec.INSTANCE;
    }

    /** Sets up an instance of `CameraInterface` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, CameraInterface api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CameraInterface.setupCamera", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setupCamera(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CameraInterface.checkPermissions", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              List<String> output = api.checkPermissions();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CameraInterface.requestPermissions", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              List<String> output = api.requestPermissions();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CameraInterface.getPreviewTextureId", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number cameraIdArg = (Number)args.get(0);
              if (cameraIdArg == null) {
                throw new NullPointerException("cameraIdArg unexpectedly null.");
              }
              PreviewData output = api.getPreviewTextureId(cameraIdArg.longValue());
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CameraInterface.takePicture", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              String output = api.takePicture();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CameraInterface.takeVideo", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              String output = api.takeVideo();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
